version: '3.8'
services:
  spring:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cluvr-chat
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - cluvr-net

  mongo:
    restart: always
    image: mongo:6.0
    container_name: cluvr-mongo
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 5s
      retries: 5
      start_period: 10s
    ports:
      - "27017:27017"
    networks:
      - cluvr-net

  mysql:
    restart: always
    image: mysql:8.0
    container_name: mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 5s
      retries: 5
      start_period: 10s
    environment:
      MYSQL_DATABASE: cluvr-chat
      MYSQL_ROOT_PASSWORD: 1100
      MYSQL_ROOT_HOST: '%'
      TZ: Asia/Seoul
    ports:
      - "3307:3306" # 내 Mac의 3307 포트로 들어오는 요청을 컨테이너 내부의 3306 포트(MySQL)로 전달해줘
    networks:
      - cluvr-net

  redis:
    image: redis:7.2 # redis 이름 버전 7.2이미지 사용.
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 5
    ports:
      - "6379:6379" # 호스트 포트 6379 <-> 컨테이너의 포트 6379 연결 (외분 연결 가능)
    restart: always
    networks:
      - cluvr-net

  zookeeper:
    restart: always
    image: confluentinc/cp-zookeeper:7.5.0 #confluentin 사의 Zookeeper 7.5.0 이미지 사용.
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 5s
      retries: 5
      start_period: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # 클라이언트 연결 포트 2181 (Kafka가 여기로 접속)
      ZOOKEEPER_TICK_TIME: 2000 # Zookeeper는 2초마다 heartbeat, 세션 timeout, 리더 선출 등의 타이밍 조정
      # 예를 들어 : 클라이언트 세션이 3 * tickTime = 6000ms 동안 응답 없으면 세션 종료됨
    networks:
      - cluvr-net

  kafka:
    restart: always
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092" # 외부 접속 가능
    depends_on: # Kafka는 Zookeeper가 먼저 떠야 실행되므로 의존성 지정
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 5s
      retries: 5
    environment: # Kafka 실행 시 환경 변수들
      KAFKA_BROKER_ID: 1 # 브로커 번호 (보통 1, 2, 3으로 구성)
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # zookeeper 주소 설정(컨테이너 이름 사용)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://54.200.146.243:9092 # Kafka 브로커가 외부에 알릴 접속 주소
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # 오프셋 저장용 토픽의 복제 수 (1이면 최소 구성)
    networks:
      - cluvr-net

  kafka-ui:
    restart: always
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - cluvr-net

networks:
  cluvr-net:
    driver: bridge